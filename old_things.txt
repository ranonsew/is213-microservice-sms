// old amqp
// rabbitmq-mgmt container id: 0c476c4886f8
// localhost:15672 -- rabbitmq

import { Twilio } from "twilio";
import dotenv from "dotenv";
import amqp from "amqplib";

// json err response message template
const err_msg = (status: number, message: string) => ({ status, message });

// environment variables for twilio
dotenv.config(); // pull .env file stuff into process.env
const { TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE_NUMBER} = process.env;
// object destructuring because it looks sort of cool

// variables for amqp
const exchange = { name: 'message_topic', type: 'topic' };
const options = { durable: true };
const queue = { name: 'Twilio-Sms', key: '*.notification' };

// helper function: open connection to rabbitmq
async function openChannel() {
  const connection = await amqp.connect({
    protocol: 'amqp',
    hostname: 'localhost',
    port: 5672,
    locale: 'en_US',
    heartbeat: 3600
  });
  const channel = await connection.createChannel();
  await channel.assertExchange(exchange.name, exchange.type, options);
  return channel;
};

// sending over amqp (done by the payment microservice)
// const send = async (jsonData: string) => {
//   const channel = await openChannel();
//   await channel.assertQueue(queue.name, options);
//   await channel.bindQueue(queue.name, exchange.name, queue.key);
//   await channel.publish(exchange.name, queue.key, Buffer.from(jsonData));
// };